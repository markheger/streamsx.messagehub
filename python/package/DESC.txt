Overview
========

Provides functions to read messages from Event Streams as a stream
and submit tuples to Event Streams as messages.

`IBMÂ® Event Streams <https://www.ibm.com/cloud/event-streams>`_ is a fully managed, cloud-based messaging service. Built on Apache Kafka, IBM Event Streams is a high-throughput, fault-tolerant, event management platform that helps you build intelligent, responsive, event-driven applications.

Sample
======

A simple hello world example of a Streams application publishing to a topic and the same application consuming the same topic::

    from streamsx.topology.topology import Topology
    from streamsx.topology.schema import CommonSchema
    from streamsx.topology.context import submit
    import streamsx.messagehub as messagehub
    import time

    def delay (v):
        time.sleep (5.0)
        return True

    topo = Topology ('MessageHubHelloWorld')

    to_mh = topo.source (['Hello', 'World!'])
    to_mh = to_mh.as_string()
    # delay tuple by tuple
    to_mh = to_mh.filter (delay)

    # Publish a stream to Event Streams using MH_HW topic
    messagehub.publish (to_mh, topic='MH_HW')

    # Subscribe to same topic as a stream
    from_mh = messagehub.subscribe (topo, schema=CommonSchema.String, topic='MH_HW')

    # You'll find the Hello World! in stdout log file:
    from_mh.print()

    submit ('STREAMING_ANALYTICS_SERVICE', topo)

Documentation
=============

* `streamsx.messagehub package documentation <http://streamsxmessagehub.readthedocs.io/en/pypackage/>`_
